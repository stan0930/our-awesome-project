<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.campus.mapper.CampusTopicMapper">

    <resultMap type="com.ruoyi.campus.domain.CampusTopic" id="CampusTopicResult">
        <result property="topicId"    column="topic_id"    />
        <result property="userId"    column="user_id"    />
        <result property="content"    column="content"    />
        <result property="imageUrls"    column="image_urls"    />
        <result property="topicType"  column="topic_type"  />
        <result property="status"    column="status"    />
        <result property="delFlag"    column="del_flag"    />
        <result property="createBy"    column="create_by"    />
        <result property="createTime"    column="create_time"    />
        <result property="updateBy"    column="update_by"    />
        <result property="updateTime"    column="update_time"    />
        <result property="remark"    column="remark"    />
        <result property="nickName"   column="nick_name"   />
        <result property="avatar"     column="avatar"      />
        <result property="likeCount"  column="like_count"  />
        <result property="liked"      column="liked"       />
        <result property="favorited"  column="favorited"   />
        <result property="commentEnabled" column="comment_enabled" />
    </resultMap>

    <resultMap type="com.ruoyi.campus.domain.CampusTopicComment" id="CampusCommentResult">
        <id     property="commentId"     column="comment_id"     />
        <result property="topicId"       column="topic_id"       />
        <result property="userId"        column="user_id"        />
        <result property="parentId"      column="parent_id"      />
        <result property="content"       column="content"        />
        <result property="createTime"    column="create_time"    />
        <result property="nickName"      column="nick_name"      />
        <result property="avatar"        column="avatar"         />
        <result property="replyToNickName" column="reply_to_nick_name" />
    </resultMap>

    <sql id="selectCampusTopicVo">
        select topic_id, user_id, content, image_urls, topic_type, status, del_flag, create_by, create_time, update_by, update_time, remark, comment_enabled from campus_topic
    </sql>

    <select id="selectCampusTopicList" parameterType="com.ruoyi.campus.domain.CampusTopic" resultMap="CampusTopicResult">
        select
        t.topic_id, t.user_id, t.content, t.image_urls, t.status, t.del_flag, t.create_by, t.create_time, t.update_by, t.update_time, t.remark, t.topic_type, t.comment_enabled,
        u.nick_name,
        u.avatar,
        (select count(*) from campus_topic_like l where l.topic_id = t.topic_id) as like_count,
        (select count(*) from campus_topic_like l where l.topic_id = t.topic_id and l.user_id = #{userId}) as liked,
        (select count(*) from campus_topic_favorite f where f.topic_id = t.topic_id and f.user_id = #{userId}) as favorited
        from campus_topic t
        left join sys_user u on u.user_id = t.user_id
        <where>
            <if test="content != null  and content != ''">
                AND (t.content like concat('%', #{content}, '%') OR u.nick_name like concat('%', #{content}, '%'))
            </if>
            <if test="topicType != null and topicType != '' and topicType != 'all'">
                and t.topic_type = #{topicType}
            </if>
        </where>
        order by t.create_time desc
    </select>

    <select id="selectCommentsByTopicId" parameterType="Long" resultMap="CampusCommentResult">
        select
            c.comment_id, c.topic_id, c.user_id, c.parent_id, c.content, c.create_time,
            u.nick_name,
            u.avatar,
            (select ru.nick_name from sys_user ru inner join campus_topic_comment rc on ru.user_id = rc.user_id where rc.comment_id = c.parent_id) as reply_to_nick_name
        from campus_topic_comment c
                 left join sys_user u on u.user_id = c.user_id
        where c.topic_id = #{topicId}
        order by c.create_time asc
    </select>

    <select id="findLikeByTopicIdAndUserId" resultType="com.ruoyi.campus.domain.CampusTopicLike">
        select * from campus_topic_like where topic_id = #{topicId} and user_id = #{userId}
    </select>

    <insert id="insertLike">
        insert into campus_topic_like(topic_id, user_id, create_time) values(#{topicId}, #{userId}, sysdate())
    </insert>

    <delete id="deleteLike">
        delete from campus_topic_like where topic_id = #{topicId} and user_id = #{userId}
    </delete>

    <insert id="insertComment" parameterType="com.ruoyi.campus.domain.CampusTopicComment">
        insert into campus_topic_comment(topic_id, user_id, parent_id, content, create_time)
        values(#{topicId}, #{userId}, #{parentId}, #{content}, #{createTime})
    </insert>

    <select id="selectCampusTopicByTopicId" parameterType="Long" resultMap="CampusTopicResult">
        <include refid="selectCampusTopicVo"/>
        where topic_id = #{topicId}
    </select>

    <insert id="insertCampusTopic" parameterType="com.ruoyi.campus.domain.CampusTopic" useGeneratedKeys="true" keyProperty="topicId">
        insert into campus_topic
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="userId != null">user_id,</if>
            <if test="content != null and content != ''">content,</if>
            <if test="imageUrls != null and imageUrls != ''">image_urls,</if>
            <if test="topicType != null and topicType != ''">topic_type,</if>
            <if test="status != null and status != ''">status,</if>
            <if test="createBy != null and createBy != ''">create_by,</if>
            <if test="createTime != null">create_time,</if>
            <if test="commentEnabled != null and commentEnabled != ''">comment_enabled,</if>
            <if test="remark != null">remark,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="userId != null">#{userId},</if>
            <if test="content != null and content != ''">#{content},</if>
            <if test="imageUrls != null and imageUrls != ''">#{imageUrls},</if>
            <if test="topicType != null and topicType != ''">#{topicType},</if>
            <if test="status != null and status != ''">#{status},</if>
            <if test="createBy != null and createBy != ''">#{createBy},</if>
            <if test="createTime != null">#{createTime},</if>
            <if test="commentEnabled != null and commentEnabled != ''">#{commentEnabled},</if>
            <if test="remark != null">#{remark},</if>
        </trim>
    </insert>

    <update id="updateCampusTopic" parameterType="com.ruoyi.campus.domain.CampusTopic">
        update campus_topic
        <trim prefix="SET" suffixOverrides=",">
            <if test="userId != null">user_id = #{userId},</if>
            <if test="content != null and content != ''">content = #{content},</if>
            <if test="imageUrls != null">image_urls = #{imageUrls},</if>
            <if test="topicType != null and topicType != ''">topic_type = #{topicType},</if>
            <if test="status != null and status != ''">status = #{status},</if>
            <if test="commentEnabled != null and commentEnabled != ''">comment_enabled = #{commentEnabled},</if>
            <if test="updateBy != null and updateBy != ''">update_by = #{updateBy},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
            <if test="remark != null">remark = #{remark},</if>
        </trim>
        where topic_id = #{topicId}
    </update>

    <delete id="deleteCampusTopicByTopicId" parameterType="Long">
        delete from campus_topic where topic_id = #{topicId}
    </delete>

    <delete id="deleteCampusTopicByTopicIds" parameterType="String">
        delete from campus_topic where topic_id in
        <foreach item="topicId" collection="array" open="(" separator="," close=")">
            #{topicId}
        </foreach>
    </delete>

    <select id="selectMyLikedTopics" parameterType="Long" resultMap="CampusTopicResult">
        select
            t.topic_id, t.user_id, t.content, t.image_urls, t.status, t.del_flag, t.create_by, t.create_time, t.update_by, t.update_time, t.remark, t.topic_type, t.comment_enabled,
            u.nick_name,
            u.avatar,
            (select count(*) from campus_topic_like l where l.topic_id = t.topic_id) as like_count,
            1 as liked,
            (select count(*) from campus_topic_favorite f where f.topic_id = t.topic_id and f.user_id = #{userId}) as favorited
        from campus_topic t
                 left join sys_user u on u.user_id = t.user_id
        where t.topic_id in (select topic_id from campus_topic_like where user_id = #{userId})
        order by t.create_time desc
    </select>

    <select id="selectMyCommentedTopics" parameterType="Long" resultMap="CampusTopicResult">
        select
            t.topic_id, t.user_id, t.content, t.image_urls, t.status, t.del_flag, t.create_by, t.create_time, t.update_by, t.update_time, t.remark, t.topic_type, t.comment_enabled,
            u.nick_name,
            u.avatar,
            (select count(*) from campus_topic_like l where l.topic_id = t.topic_id) as like_count,
            (select count(*) from campus_topic_like l where l.topic_id = t.topic_id and l.user_id = #{userId}) as liked,
            (select count(*) from campus_topic_favorite f where f.topic_id = t.topic_id and f.user_id = #{userId}) as favorited
        from campus_topic t
                 left join sys_user u on u.user_id = t.user_id
        where t.topic_id in (select distinct topic_id from campus_topic_comment where user_id = #{userId})
        order by t.create_time desc
    </select>

    <select id="findFavoriteByTopicIdAndUserId" resultType="com.ruoyi.campus.domain.CampusTopicFavorite">
        select * from campus_topic_favorite where topic_id = #{topicId} and user_id = #{userId}
    </select>

    <insert id="insertFavorite">
        insert into campus_topic_favorite(topic_id, user_id, create_time) values(#{topicId}, #{userId}, sysdate())
    </insert>

    <delete id="deleteFavorite">
        delete from campus_topic_favorite where topic_id = #{topicId} and user_id = #{userId}
    </delete>

    <select id="selectMyFavoriteTopics" parameterType="Long" resultMap="CampusTopicResult">
        select
            t.topic_id, t.user_id, t.content, t.image_urls, t.status, t.del_flag, t.create_by, t.create_time, t.update_by, t.update_time, t.remark, t.topic_type, t.comment_enabled,
            u.nick_name,
            u.avatar,
            (select count(*) from campus_topic_like l where l.topic_id = t.topic_id) as like_count,
            (select count(*) from campus_topic_like l where l.topic_id = t.topic_id and l.user_id = #{userId}) as liked,
            1 as favorited
        from campus_topic t
                 left join sys_user u on u.user_id = t.user_id
        where t.topic_id in (select topic_id from campus_topic_favorite where user_id = #{userId})
        order by t.create_time desc
    </select>

</mapper>
